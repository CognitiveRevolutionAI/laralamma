"[\"Here is a brain dump of the context of the talk, in the middle I will list off the \\\"bullet\\\" points that it will lead into. If this is a good sense of context then I can turn it into enough slides to surface the Technology parts. Also I was thinking I like more \\\"interaction\\\" Q and A as I go is that possible or is the audience not like that?\",\n  \"One, I was going to start off with the concept of the technology does not alway matters\/ And then I wanted to focus on the technology should be able to achieve the product owners goals so understanding those goals are key. This can be you building a saas for a one person company or 100 just knowing the goal and using the right tech for that goal.\",\n  \"That leads into the \\\"right tech\\\" and that is where I was going to go into \\\"what makes it the right tech\\\" If you are a lone dev or on a team and you are just now trying to figure out what is the right tech it might then let me share how I went about figuring tihs out for Pfizer 12 years ago and what I still think works today.\",\n  \"First the tech is rarely the reason or the problem behind a successful or unsuccessful product. When a product fails, other than not being a good idea, it typically is either the system built was not inline with the vision of the product owner or B the skill or the developer(s) was not the right match for the system used.\",\n  \"When I was first asked to build a very specific application when I was first contracted at Pfizer it required lot of nuances. So for the product I was building some things had to be present.\",\n  \"(Final list at the end) 1) [UI REQUIREMENT] - The ui had to be JavaScript to make it function the way the owner wanted for his users (when the requirements needed a UI that was complex and interactive) 2) The backend had a lot of long running processes (Queue system)\",\n  \"3) Authentication that had to be solid and proven 4) Authentication that could integrate into SAML 5) Feature Flag integration 6) Able to integrate into other APIs 7) The ENVironemnt file had to be part of the deployment process 8) [UI REQUIREMENT] - The ui needed to be updated as the processes completed using web sockets\",\n  \"9) The system had to work on AWS 10) The system has to have a good testing foundation 11) The system had to work with a team (me which grew to 25 people) 12) The system had to deploy easily, with zero downtime, no touch, migrations etc 13) The system had to use technology that we as a team could work with eg what skills did the current team have\",\n  \"14) Consistent Training and documentation (team standards, ci\/cd etc) ideally the stack had to have amazing documentation and community. 15) Linting system to help team standards 16) Automation for MINOR updates 17) Automation for Security (kinda of happens with MINOR updates) 18) Had to scale (Queues had been a big part of this)\",\n  \"At the time I just rebooted my freelance endeavors and was using Ruby on Rails but I still had some history with Drupal (PHP) and recently Laravel (a lot like Ruby on Rails which brought me back to PHP after getting frustrated with Drupal) So when I was contract out for this project and told at first due to limitations of the company I was able to show the product owner his idea come to life.\",\n  \"But I also showed him the limitations at that time of Drupal and a JavaScript front end (at that time it was Angular) and also it's lack of an ability to do APIs well it was clear the technology was not a good fit for the product goal. At that time I had a lot going on with Laravel and Angular so I was able to show his product come together more quickly with that (for PHP developers this is when Composer was just coming out and Laravel was an MVC, Ooo framework that used Composer)\",\n  \"So when it was clear that the product he saw was what he wanted and that Drupal at the time (no Composer, Ooo was minimal, testing was minimal, and it did not at the time have a great routing system or theme system for SPA like applications (that was the thing back then \ud83d\ude41) And that Laravel and Angular was all of the above it was easy then to decide to allow for a second option at that time to build Applications.\",\n  \"And it was then that we implemented many of the best practices to make it. With this we created two foundations for almost any project. This allowed us as a team to focus on the nuances of the products the different departments needed and not the technology. With this came training for any new team member or vendor.\",\n  \"This lead to new projects taking hours to get ready and deploy vs weeks. And the two foundations allowed us focus on different type of projects but sharing a core of the above requirements. This lead though to hard discussions when developers wanted to use Go or Django or other frameworks. See the problem was not the technology it was the foundation and training that needed to happen to put it in place, and allow any team to manage it if needed.\",\n  \"So for a while the answer was no and it was not no to Go, or Django, it was no to the lack of all those underlaying requirements and ongoing support. Also Ops is one and done imo. Once this system was in place we focused on Dev not ops. The only time ops came into play was when a new services was required. For example one day a product needed Cognito so we did what we could to build that out once then automate the build process from there on so no one needed to know about AWS, Docker, ECS nothing.\"\n]"