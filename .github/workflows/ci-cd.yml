name: CI-CD

on: [ push ]

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      DB_CONNECTION: pgsql
      DB_DATABASE: testing
      DB_USERNAME: postgres
      DB_PASSWORD: password
      APP_ENV: testing
      BROADCAST_DRIVER: log
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testing
        ports:
          - 5432/tcp
        options: --health-cmd="pg_isready -U postgres" --health-interval=10s --health-timeout=5s --health-retries=5

    strategy:
      fail-fast: false
      matrix:
        php-versions: [ "8.2" ]
    steps:
      - uses: actions/checkout@v4

      - name: Create the PostgreSQL database
        run: |
          sudo service postgresql start
          PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -tc "SELECT 1 FROM pg_database WHERE datname = 'testing'" | grep -q 1 || PGPASSWORD=$POSTGRES_PASSWORD psql -h localhost -U $POSTGRES_USER -c "CREATE DATABASE testing"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password      

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: phpmd
          extensions: mbstring, dom, fileinfo, pgsql, grpc, :psr
          coverage: xdebug

      - name: Enable PostgreSQL Extensions
        run: |
          sudo service postgresql start
          sudo -u postgres psql -c "CREATE EXTENSION IF NOT EXISTS vector;" -d testing

      - name: Test with phpunit
        run: |
          npm install && npm run build
          XDEBUG_MODE=coverage php artisan test --coverage  --min=50
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}

  cd:
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          tools: composer:v2
          coverage: none
      - name: Install Project Dependencies
        run: |
          curl https://envoyer.io/deploy/${{ secrets.ENVOYER }}
